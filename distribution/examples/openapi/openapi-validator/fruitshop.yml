openapi: 3.0.1
info:
  title: Fruit Shop API
  description: This is a showcase for REST API design and serves as a public API for
    educational usage.
  contact:
    name: Thomas Bayer
    url: http://predic8.de
    email: bayer@predic8.de
  version: 1.0.0
servers:
- url: https://api.predic8.de:443/shop
tags:
- name: categories
- name: customers
- name: orders
- name: products
- name: vendors
paths:
  /categories/:
    get:
      tags:
      - categories
      summary: Lists all the product categories
      operationId: getShopCategories
      responses:
        200:
          description: List of categories
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryList'
  /categories/{id}:
    get:
      tags:
      - categories
      summary: Get a category by id
      operationId: getShopCategoriesId
      parameters:
      - name: id
        in: path
        description: Id of a category
        required: true
        schema:
          type: string
      responses:
        200:
          description: Collection of products
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductList'
  /customers/{id}:
    get:
      tags:
      - customers
      summary: Get a customer by id
      operationId: getShopCustomersId
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Customer details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      tags:
      - customers
      summary: Replace a customer by new data
      operationId: putShopCustomersId
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer'
        required: false
      responses:
        200:
          description: Customer details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
      x-codegen-request-body-name: body
    delete:
      tags:
      - customers
      summary: Delete a customer
      operationId: deleteShopCustomersId
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - customers
      summary: Update a customer
      operationId: patchShopCustomersId
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CustomerPatch'
        required: false
      responses:
        200:
          description: Customer details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
      x-codegen-request-body-name: body
  /customers/:
    get:
      tags:
      - customers
      summary: Lists all the customers
      operationId: getShopCustomers
      responses:
        200:
          description: Collection of customers
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CustomerList'
    post:
      tags:
      - customers
      summary: Create a customer
      operationId: postShopCustomers
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Customer'
        required: false
      responses:
        200:
          description: Customer details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Customer'
      x-codegen-request-body-name: body
  /orders/{id}:
    get:
      tags:
      - orders
      summary: Get an order by id
      operationId: getShopOrdersId
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Order details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      tags:
      - orders
      summary: Delete an order
      operationId: deleteShopOrdersId
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
  /orders/:
    get:
      tags:
      - orders
      summary: Lists all the orders
      operationId: getShopOrders
      parameters:
      - name: state
        in: query
        description: State of the order
        schema:
          type: string
          enum:
          - created
          - ordered
          - delivered
          - canceled
      responses:
        200:
          description: Collection of orders
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderList'
  /products/{id}:
    get:
      tags:
      - products
      summary: Get a product by id
      operationId: getProduct
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Product description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
      - products
      summary: Replace a product by new data
      operationId: putShopProductsId
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product'
        required: false
      responses:
        200:
          description: Product description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
      x-codegen-request-body-name: body
    delete:
      tags:
      - products
      summary: Delete a product
      operationId: deleteShopProductsId
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - products
      summary: Update one or more properties of a product
      operationId: patchShopProductsId
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProductPatch'
        required: false
      responses:
        200:
          description: Product description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
      x-codegen-request-body-name: body
  /products/:
    get:
      tags:
      - products
      summary: Lists all the products
      operationId: getProducts
      responses:
        200:
          description: Collection of products
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductList'
    post:
      tags:
      - products
      summary: Create a product
      operationId: postShopProducts
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Product'
        required: false
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
      x-codegen-request-body-name: body
  /vendors/{id}:
    get:
      tags:
      - vendors
      summary: Get a vendor by id
      operationId: getShopVendorsId
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Vendor of products
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vendor'
    put:
      tags:
      - vendors
      summary: Replace a vendor by new data
      operationId: putShopVendorsId
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - vendors
      summary: Delete a vendor
      operationId: deleteShopVendorsId
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - vendors
      summary: Update a vendor
      operationId: patchShopVendorsId
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
  /vendors/:
    get:
      tags:
      - vendors
      summary: Lists all the vendors
      operationId: getShopVendors
      responses:
        200:
          description: Collection of vendors
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/VendorList'
    post:
      tags:
      - vendors
      summary: Create a vendor
      operationId: postShopVendors
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Vendor'
        required: false
      responses:
        200:
          description: Vendor of products
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Vendor'
      x-codegen-request-body-name: body
  /products/{id}/photo:
    get:
      tags:
      - products
      summary: Get a photo of a product
      operationId: getShopProductsIdPhoto
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
      - products
      summary: Add or update the photo of a product
      description: Length of the image is limited to 512 KBytes.
      operationId: putShopProductsIdPhoto
      parameters:
      - name: id
        in: path
        description: Id of a product
        required: true
        schema:
          type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: false
      responses:
        200:
          description: Product description
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Product'
      x-codegen-request-body-name: body
  /customers/{id}/orders/:
    get:
      tags:
      - customers
      summary: Get the orders of a customer
      operationId: getShopCustomersIdOrders
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Collection of orders
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OrderList'
    post:
      tags:
      - customers
      summary: Create an order for a customer
      operationId: postShopCustomersIdOrders
      parameters:
      - name: id
        in: path
        description: Id of a customer
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Order details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}/items/:
    get:
      tags:
      - orders
      summary: Get the items of an order
      operationId: getShopOrdersIdItems
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Collection of items
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Items'
    post:
      tags:
      - orders
      summary: Add an item to an order
      operationId: postShopOrdersIdItems
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Item'
        required: false
      responses:
        200:
          description: Item details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
      x-codegen-request-body-name: body
  /orders/{oid}/items/{iid}:
    get:
      tags:
      - orders
      summary: Get an item of an order
      operationId: getShopOrdersOidItemsIid
      parameters:
      - name: oid
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      - name: iid
        in: path
        description: Id of an item
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Item details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      tags:
      - orders
      summary: Delete an item of an order
      operationId: deleteShopOrdersOidItemsIid
      parameters:
      - name: oid
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      - name: iid
        in: path
        description: Id of an item
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
  /vendors/{id}/products/:
    get:
      tags:
      - vendors
      summary: Get the products of a vendor
      operationId: getShopVendorsIdProducts
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
      - vendors
      summary: Add a product to a vendor
      operationId: postShopVendorsIdProducts
      parameters:
      - name: id
        in: path
        description: Id of a vendor
        required: true
        schema:
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamePriceCategory'
        required: false
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
      x-codegen-request-body-name: body
  /orders/{id}/actions/purchase:
    post:
      tags:
      - orders
      summary: Purchase an order
      operationId: postShopOrdersIdActionsPurchase
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
  /orders/{id}/actions/cancel:
    post:
      tags:
      - orders
      summary: Cancel an order
      operationId: postShopOrdersIdActionsCancel
      parameters:
      - name: id
        in: path
        description: Id of an order
        required: true
        schema:
          type: integer
      responses:
        default:
          description: Successful
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    CategoryEntry:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the category
          example: Fruits
        category_url:
          type: string
          example: /shop/categories/Fruits
      description: Category entry
      x-meta:
        className: CategoryEntry
    categories:
      type: array
      items:
        $ref: '#/components/schemas/CategoryEntry'
    CategoryList:
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/categories'
      description: List of categories
      x-meta:
        className: CategoryList
    Meta:
      required:
      - count
      type: object
      properties:
        count:
          type: integer
          description: Total number of entries
          example: 22
        limit:
          type: integer
          description: How many entries are delivered in one response
          example: 10
        page:
          type: integer
          description: Number of the page within the results
          example: 2
        previous_url:
          type: string
          description: URL to the previous page of results
          example: /shop/products/?page=1&limit=10
        next_url:
          type: string
          description: URL to the next page of results
          example: /shop/products/?page=3&limit=10
      description: Metadata about a collection of resources.
      x-meta:
        className: Meta
    ProductEntry:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the product
        product_url:
          type: string
      description: Entry of a product collection
      example:
        name: Pineapples
        product_url: /shop/products/33
      x-meta:
        className: ProductEntry
    products:
      type: array
      items:
        $ref: '#/components/schemas/ProductEntry'
    ProductList:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        products:
          $ref: '#/components/schemas/products'
      description: Collection of products
      x-meta:
        className: ProductList
    Customer:
      required:
      - firstname
      - lastname
      type: object
      properties:
        firstname:
          type: string
          example: Fred
        lastname:
          type: string
          example: Meyers
        orders_url:
          type: string
          description: Link to the orders of the customer
        customer_url:
          type: string
          description: Link to the customer resource
      description: Customer details
      example:
        firstname: Freddy
        lastname: Meyers
      x-meta:
        className: Customer
    CustomerEntry:
      required:
      - firstname
      - lastname
      type: object
      properties:
        firstname:
          type: string
          example: Susan
        lastname:
          type: string
          example: Tanner
        customer_url:
          type: string
          example: /shop/customer/642
      description: Entry of a collection of customers
      x-meta:
        className: customerEntry
    customers:
      type: array
      items:
        $ref: '#/components/schemas/CustomerEntry'
    CustomerList:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        customers:
          $ref: '#/components/schemas/customers'
      description: Collection of customers
      x-meta:
        className: CustomerList
    ActionDescription:
      type: object
      properties:
        url:
          type: string
          example: /shop/orders/7959/actions/purchase
        method:
          type: string
          enum:
          - POST
      description: Description of a possible action on the resource
      x-meta:
        className: ActionDescription
    Actions:
      type: object
      properties:
        purchase:
          $ref: '#/components/schemas/ActionDescription'
        cancel:
          $ref: '#/components/schemas/ActionDescription'
      description: Actions that the order supports
      example:
        purchase:
          url: /shop/orders/7959/actions/purchase
          method: POST
      x-meta:
        className: Actions
    Order:
      required:
      - actions
      type: object
      properties:
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        state:
          type: string
          description: State of the order
          enum:
          - created
          - ordered
          - delivered
          - canceled
        customer_url:
          type: string
          example: /shop/customers/342
        actions:
          $ref: '#/components/schemas/Actions'
        items_url:
          type: string
        total:
          type: number
          description: Price of a good
          example: 4.5
          x-constraint:
            positive: true
      description: Order details
      x-meta:
        className: Order
    OrderEntry:
      type: object
      properties:
        createdAt:
          type: string
          format: date
        state:
          type: string
          description: State of the order
          enum:
          - created
          - ordered
          - delivered
          - canceled
        order_url:
          type: string
          example: /shop/orders/7832
      description: List entry of an order
      x-meta:
        className: OrderEntry
    orders:
      type: array
      items:
        $ref: '#/components/schemas/OrderEntry'
    OrderList:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        orders:
          $ref: '#/components/schemas/orders'
      description: Collection of orders
      x-meta:
        className: OrderList
    Product:
      required:
      - price
      type: object
      properties:
        name:
          type: string
          description: Name of a product
          example: Berries
        price:
          type: number
          description: Price of a good
          example: 4.5
          x-constraint:
            positive: true
        category:
          type: string
          description: Category of products e.g. Fruits
          example: Fruits
        vendor_url:
          type: string
        category_url:
          type: string
        vendor:
          type: integer
        photo_url:
          type: string
      description: Product description
      example:
        name: Wildberries
        price: 4.99
        category_url: /shop/categories/Fruits
        vendor_url: /shop/vendors/672
      x-meta:
        className: Product
    Vendor:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the vendor
          example: foo
        products_url:
          type: string
          description: URL to the products of this vendor
        vendor_url:
          type: string
          description: URL of the vendor
      description: Vendor of products
      example:
        name: Franks Fresh Fruits from France Ltd.
      x-meta:
        className: Vendor
    VendorEntry:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the vendor
        vendor_url:
          type: string
      description: Listentry of a vendor
      x-meta:
        className: VendorEntry
    vendors:
      type: array
      items:
        $ref: '#/components/schemas/VendorEntry'
    VendorList:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        vendors:
          $ref: '#/components/schemas/vendors'
      description: Collection of vendors
      x-meta:
        className: VendorList
    Item:
      required:
      - price
      type: object
      properties:
        quantity:
          type: number
          example: 5.0
        price:
          type: number
          description: Price of a good
          example: 4.5
          x-constraint:
            positive: true
        item_url:
          type: string
        product:
          type: number
        product_url:
          type: string
        order_url:
          type: string
      description: Item details
      example:
        quantity: 5
        price: 0.9
        item_url: /shop/orders/1432/items/1
        product_url: /shop/products/3
      x-meta:
        className: Item
    ItemList:
      type: array
      description: Collection of items
      items:
        $ref: '#/components/schemas/Item'
      x-meta:
        className: ItemList
    Items:
      required:
      - items
      type: object
      properties:
        order_url:
          type: string
          example: /shop/orders/1432
        items:
          $ref: '#/components/schemas/ItemList'
      description: Collection of items
      x-meta:
        className: Items
    File:
      type: object
    ProductImage:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/File'
      description: Image of a product
    CustomerPatch:
      type: object
      properties:
        firstname:
          type: string
          example: Fred
        lastname:
          type: string
          example: Meyers
      description: 'Any properties of the customer can be updated e.g. { "firstname":
        "Kai" }'
      example:
        firstname: Fred
        lastname: Meyers
      x-meta:
        className: CustomerPatch
    ProductPatch:
      type: object
      properties:
        name:
          type: string
          description: Name of a product
          example: Berries
        price:
          type: number
          description: Price of a good
          example: 4.5
          x-constraint:
            positive: true
        category:
          type: string
          description: Category of products e.g. Fruits
          example: Fruits
        vendor_url:
          type: string
        category_url:
          type: string
        vendor:
          type: integer
      description: Structure to patch a product. All the properties are optional.
      example:
        name: Wildberries
        price: 4.99
        category_url: /shop/categories/Fruits
        vendor_url: /shop/vendors/672
      x-meta:
        className: ProductPatch
    NamePriceCategory:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        category:
          type: string
