<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">

	<router>

		<!-- Configures Membrane as an API Gateway for the given OpenAPI specification -->
		<openAPIProxy port="2000">
            <spec location="contacts-xxl-api-v1.yml" validateRequests="yes" validateResponses="no" validationDetails="yes"/>
        </openAPIProxy>

		<!-- These proxies provides mock backend implementations for the API in this demo. Instead
			 of mocks use the backends for your API.
		-->
		<serviceProxy port="3000">
			<path isRegExp="true">/demo-api/v2/persons/.*</path>
			<response>
				<template pretty="true" contentType="application/json">
						{
							"id": "12358",
							"name": "Bo",
							"email": "foo@baz.org"
						}
				</template>
			</response>
            <return statusCode="201"/>
        </serviceProxy>

		<serviceProxy port="3000" method="GET">
			<path>/demo-api/v2/persons</path>
			<response>
				<template pretty="true" contentType="application/json">
					{ "persons": [
						{
							"id": "12358",
							"name": "Bo",
							"email": "foo@baz.org"
						}
					] }
				</template>
			</response>
            <return statusCode="200"/>
        </serviceProxy>

		<!-- Monitoring endpoint for prometheus -->
		<serviceProxy name="Prometheus Monitoring" port="8888">
			<path>/metrics</path>
			<prometheus/>
		</serviceProxy>
	
	</router>
	
</spring:beans>
